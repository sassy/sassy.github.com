<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sassy Memo Blog]]></title>
  <link href="http://sassy.github.com/atom.xml" rel="self"/>
  <link href="http://sassy.github.com/"/>
  <updated>2011-12-01T07:35:51+09:00</updated>
  <id>http://sassy.github.com/</id>
  <author>
    <name><![CDATA[Satoshi Watanabe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHPのファイル処理]]></title>
    <link href="http://sassy.github.com/blog/2011/12/01/php-file/"/>
    <updated>2011-12-01T07:30:00+09:00</updated>
    <id>http://sassy.github.com/blog/2011/12/01/php-file</id>
    <content type="html"><![CDATA[<h2>PHPのファイル処理</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>$file = fopen("./file.txt", "r");
</span><span class='line'>while (!feof($file)) {
</span><span class='line'>  $line = fgets($file);
</span><span class='line'>  echo $line;
</span><span class='line'>}
</span><span class='line'>fclose($file);
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<h4>fopen</h4>

<ul>
<li>ファイルを開く</li>
<li>戻り値はファイルハンドラ</li>
<li>第２引数のrは読み取り専用, wは書き込み専用, r+/w+は読み込み／書き込み, aは追記, a+は追記と読み込み

<h4>fclose</h4></li>
<li>ファイルを閉じる

<h4>feof</h4></li>
<li>ファイルを最後までよんだかチェックする

<h4>fgets</h4></li>
<li>ファイルから１行読み込む</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPの配列]]></title>
    <link href="http://sassy.github.com/blog/2011/11/27/php-array/"/>
    <updated>2011-11-27T14:10:00+09:00</updated>
    <id>http://sassy.github.com/blog/2011/11/27/php-array</id>
    <content type="html"><![CDATA[<h2>PHPの配列</h2>

<h3>初期化</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$member = array('Atsuko', 'Yuko', 'Haruna',);
</span><span class='line'>echo $member[0], PHP_EOL; // Atsuko</span></code></pre></td></tr></table></div></figure>


<ul>
<li>array()関数で配列初期化</li>
<li>[]で配列アクセス

<ul>
<li>添字は0から</li>
</ul>
</li>
<li>以下のように配列に要素を追加することも可能</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$member[] = 'Mariko';
</span><span class='line'>$member[] = 'Mayu';</span></code></pre></td></tr></table></div></figure>


<h3>連想配列</h3>

<ul>
<li>要素に名前を付けることが可能</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>array([キー =&gt; 要素 [,...] ])</span></code></pre></td></tr></table></div></figure>


<p>例えば、下記のようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>$fruits_color = array(
</span><span class='line'>  'apple' =&gt; 'red',
</span><span class='line'>  'banana' =&gt; 'yellow',
</span><span class='line'>  'orange' =&gt; 'orange',
</span><span class='line'>);
</span><span class='line'>echo $fruits_color['banana'], PHP_EOL; //yellow
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>キーとして使えるのは、

<ul>
<li>整数</li>
<li>文字列</li>
</ul>
</li>
</ul>


<h3>配列の演算</h3>

<table>
<thead>
<tr>
<th>演算子</th>
<th>意味</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>+    </td>
<td>結合  </td>
<td>両辺を結合</td>
</tr>
<tr>
<td>==   </td>
<td>同一  </td>
<td>両辺のキーと値のペアが等しい場合true</td>
</tr>
<tr>
<td>===  </td>
<td>同等  </td>
<td>両辺のキー／値が等しい、並び順が等しい、データ型も等しい場合true</td>
</tr>
<tr>
<td>!=,&lt;></td>
<td>同等でない</td>
<td>両辺が同等でない</td>
</tr>
<tr>
<td>!==  </td>
<td>同一でない</td>
<td>両辺が同一でない</td>
</tr>
</tbody>
</table>


<h3>foreach</h3>

<ul>
<li>配列やIteratorインターフェースを実装したクラスのオブジェクトに使用可能</li>
<li>データ構造を順番に処理するための制御構造</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foreach(反復可能なデータ構造 as 要素) {
</span><span class='line'>  処理
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>$no3b = array('Kojiharu', 'Takamina', 'Miichan');
</span><span class='line'>foreach ($no3b as $member) {
</span><span class='line'>  echo $member, PHP_EOL;
</span><span class='line'>}
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>参照も使用可能</li>
<li>参照を使うと元の配列の要素を変更することが可能</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foreach(反復可能なデータ構造 as &要素) {
</span><span class='line'>  処理
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>array_shift()</h3>

<ul>
<li>配列の先頭を取り出す</li>
<li>先頭要素は削除される

<h3>array_unshift()</h3></li>
<li>配列の先頭に要素を追加する

<h3>array_pop()</h3></li>
<li>配列の末尾から要素を取り出す

<h3>array_push()</h3></li>
<li>配列の末尾に要素を追加する</li>
</ul>


<h3>sort</h3>

<ul>
<li>配列をsortする</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>$nums = array(4, 7, 9, 5, 1, 3, 6,);
</span><span class='line'>sort($nums);
</span><span class='line'>foreach ($nums as $num) {
</span><span class='line'>  echo $num, PHP_EOL;
</span><span class='line'>}
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>sortの関数は以下

<ul>
<li>sort 配列のsortを昇順に並び替える</li>
<li>rsort 配列のsortを降順に並び替える</li>
<li>ksort 配列をキーに対して昇順に並び替える</li>
<li>krsort 配列をキーに対して降順に並び替える</li>
<li>asort キーと値の関係を維持しつつ値に対して昇順に並び替える</li>
<li>arsort キーと値の関係を維持しつつ値に対して降順に並び替える</li>
<li>usort ユーザ定義の比較関数を用いて並び替える</li>
<li>uasort ユーザ定義の比較関数を用いてキーと値の関係を維持しつつ並び替える</li>
<li>uksort ユーザ定義の比較関数を用いてキーを並び替える</li>
</ul>
</li>
</ul>


<h3>list()</h3>

<ul>
<li>配列の各要素を一度に変数に代入する</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>$members = array('Atuko', 'Yuko', 'Yuki');
</span><span class='line'>list($first, $second, $third) = $members;
</span><span class='line'>echo $first, PHP_EOL;
</span><span class='line'>echo $second, PHP_EOL;
</span><span class='line'>echo $third, PHP_EOL;
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<h3>explode</h3>

<ul>
<li>文字列を特定の文字列で分割し、配列にする</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>$member_str = "Atuko:Yuko:Haruna";
</span><span class='line'>$members = explode(':', $member_str);
</span><span class='line'>foreach($members as $member) {
</span><span class='line'>  echo $member, PHP_EOL;
</span><span class='line'>}
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPの関数]]></title>
    <link href="http://sassy.github.com/blog/2011/11/27/php-function/"/>
    <updated>2011-11-27T13:11:00+09:00</updated>
    <id>http://sassy.github.com/blog/2011/11/27/php-function</id>
    <content type="html"><![CDATA[<h2>PHPをコマンドラインで使うには、</h2>

<ul>
<li>phpファイルを以下のように記述</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/php -q
</span><span class='line'>&lt;?php
</span><span class='line'> ・・・(処理を記述)・・・
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>php ./test.php</code>で実行する</li>
</ul>


<h2>PHPの関数</h2>

<ul>
<li><code>function 関数名 ([引数])</code>で定義</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>function hello_add($v1, $v2)  //関数の定義
</span><span class='line'>{
</span><span class='line'>  $answer = $v1 + $v2;
</span><span class='line'>  return $answer;  // return で結果を返す
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>$v3 = hello_add(1, 2);
</span><span class='line'>echo($v3);
</span><span class='line'>echo("\n");
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<h3>引数のデフォルト値</h3>

<ul>
<li>=演算子で指定する</li>
<li>デフォルト値を持つ引数は、デフォルト値を持たない引数より後に定義</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>function say_hello($name, $greeting='Hello!')
</span><span class='line'>{
</span><span class='line'>  echo $greeting, $name, PHP_EOL;
</span><span class='line'>}
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<h3>コールバック関数</h3>

<ul>
<li>PHPは引数に関数を渡すことができる</li>
<li>引数に渡す方法は以下

<ul>
<li>関数名を文字列</li>
<li>無名関数</li>
<li>クラスやクラスのインスタンスとメソッド名を持つ配列</li>
<li>クラスの静的メソッドを表す文字列</li>
</ul>
</li>
<li>下記は <code>array_map()</code>という配列一つ一つに渡された関数を適用する関数を使用した例</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>function  add5($v)
</span><span class='line'>{
</span><span class='line'>  return $v + 5;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>$num_array = array(1, 2, 3, 4, 5);
</span><span class='line'>$new_num_array = array_map('add5', $num_array); //関数名を文字列で指定
</span><span class='line'>foreach ($new_num_array as $value) {
</span><span class='line'>  echo $value, PHP_EOL;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上記の結果は、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>6
</span><span class='line'>7
</span><span class='line'>8
</span><span class='line'>9
</span><span class='line'>10</span></code></pre></td></tr></table></div></figure>


<h3>可変関数</h3>

<ul>
<li>以下のように、関数名が代入された変数を使って、関数を呼び出すことも可能</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$name = 'add5';
</span><span class='line'>echo $name(3), PHP_EOL;  //$name を使って add5(3) を実行</span></code></pre></td></tr></table></div></figure>


<h3>参照</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>function &add_one(&$value)
</span><span class='line'>{
</span><span class='line'>    $value += 1;
</span><span class='line'>    return $value;
</span><span class='line'>}
</span><span class='line'>$a = 10;
</span><span class='line'>$b =& add_one($a);  //関数の返り値を参照で受け取る必要がある
</span><span class='line'>$b += 1;  // $bだけでなく、$aも変更される
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<h3>無名関数</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>$add = function($v1, $v2)
</span><span class='line'>{
</span><span class='line'>   return $v1 + $v2;
</span><span class='line'>};
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<h3>call_user_func()/call_user_func_array()</h3>

<ul>
<li>call_user_func は第１引数に関数名や無名関数、第２引数以降はその関数の引数を指定</li>
<li>call_user_func_array は第１引数に関数名や無名関数、第２引数にその関数の引数を配列で指定</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>function add($v1, $v2)
</span><span class='line'>{
</span><span class='line'>  return $v1 + $v2;
</span><span class='line'>}
</span><span class='line'>$ret = call_user_func('add', 1, 2); // 関数名を文字列で指定
</span><span class='line'>echo $ret, PHP_EOL;
</span><span class='line'>$ret = call_user_func(function($v1, $v2){ return $v1 + $v2; }, 1, 2);  //無名関数を指定
</span><span class='line'>echo $ret, PHP_EOL;
</span><span class='line'>
</span><span class='line'>$ret = call_user_func_array('add', array(1, 2)); //引数を配列で指定
</span><span class='line'>echo $ret, PHP_EOL;
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<h3>get_defined_functions()</h3>

<ul>
<li>定義済み関数を調べるにはget_defined_functions()</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クロージャとは]]></title>
    <link href="http://sassy.github.com/blog/2011/11/26/closure/"/>
    <updated>2011-11-26T23:42:00+09:00</updated>
    <id>http://sassy.github.com/blog/2011/11/26/closure</id>
    <content type="html"><![CDATA[<h2>クロージャとは</h2>

<ul>
<li>関数の一種</li>
<li>引数以外の変数は関数が作成された時点で決定する</li>
</ul>


<p>schemeでいうところの、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (f x)
</span><span class='line'>  (lambda (y) (+ x y)))</span></code></pre></td></tr></table></div></figure>


<p>という関数を定義した場合、この関数を実行すると <code>(lambda (y) (+ x y))</code>という関数が返ってくる。この関数のxは、関数fを実行したときに決定される。</p>

<p>例えば、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(f 3)</span></code></pre></td></tr></table></div></figure>


<p>と実行した場合、xはこのとき渡した値である、3を参照する。
例えば、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (f x)
</span><span class='line'>  (let ((a x))
</span><span class='line'>    (lambda (y) 
</span><span class='line'>      (set! a (+ a 1)) 
</span><span class='line'>      (+ a y)
</span><span class='line'>      )))
</span><span class='line'>(define g (f 3))</span></code></pre></td></tr></table></div></figure>


<p>と書いた場合、<code>(g 3)</code>を実行すると、最初は7,次は8と毎回xの値が増えて行く。</p>

<p>上記の変数aは、この<code>(define (f x) ...)</code>のスコープでした参照できず、その外側の関数からは参照できない。</p>

<h3>JavaScript</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function f() {
</span><span class='line'>  var i = 0;
</span><span class='line'>  return function() {i = i+1; return i;}
</span><span class='line'>}
</span><span class='line'>g = new f();</span></code></pre></td></tr></table></div></figure>


<p>のように書けば、<code>g();</code>を実行するたびに、1,2と値が増えて行く。
このiは、外側からはアクセスできない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScalaでFizzBuzz]]></title>
    <link href="http://sassy.github.com/blog/2011/11/21/scala1/"/>
    <updated>2011-11-21T00:06:00+09:00</updated>
    <id>http://sassy.github.com/blog/2011/11/21/scala1</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for(i&lt;-1 to 100)
</span><span class='line'>    if (i%15==0)  println("FizzBuzz")
</span><span class='line'>    else if (i%3==0)  println("Fizz")
</span><span class='line'>    else if (i%5==0) println("Buzz")
</span><span class='line'>    else println(i)</span></code></pre></td></tr></table></div></figure>


<p>for文はいわゆる反復処理で配列に対して一つ一つアクセスできる
<code>for (arg &lt;- args)</code>みたいな感じで。
Cっぽい</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for (i = 0; i &lt; 10; i++)</span></code></pre></td></tr></table></div></figure>


<p>は、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for (i&lt;-0 to 9)</span></code></pre></td></tr></table></div></figure>


<p>のように書く。</p>

<p>if-elseはほとんどC/Javaと同じで、elseifというのは特別に用意されてないっぽいけど、まあ同じように書ける。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LESSって何?]]></title>
    <link href="http://sassy.github.com/blog/2011/11/20/less/"/>
    <updated>2011-11-20T15:58:00+09:00</updated>
    <id>http://sassy.github.com/blog/2011/11/20/less</id>
    <content type="html"><![CDATA[<p><img src="http://lesscss.org/images/logo.png" title="'logo'" ></p>

<h2>LESS</h2>

<ul>
<li>The dynamic stylesheet language.</li>
<li>要するに、CSSのメタ言語</li>
<li>JavaScriptで実装される</li>
</ul>


<h2>LESSのメリット</h2>

<ul>
<li>ネスト</li>
<li>変数</li>
<li>ミックスイン</li>
<li>演算／関数</li>
</ul>


<p>要するに、SCSSでメリットだったことがメリット</p>

<h2>LESSを使うには</h2>

<h3>クライアントサイド</h3>

<p>less.jsを持って来て</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;link rel="stylesheet/less" type="text/css" href="styles.less"&gt;
</span><span class='line'>&lt;script src="less.js" type="text/javascript"&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>を書く。</p>

<h3>サーバーサイド(node.js)</h3>

<p>インストールは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install less</span></code></pre></td></tr></table></div></figure>


<p>あとは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var less = require('less');
</span><span class='line'>
</span><span class='line'>less.render('.class { width: 1 + 1 }', function (e, css) {
</span><span class='line'>    console.log(css);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>のように使えば、生成される。</p>

<h2>LESSの文法</h2>

<ul>
<li>変数</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@nice-blue : #5B83AD;
</span><span class='line'>#header {
</span><span class='line'>  color : @nice-blue;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>とすれば、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#header { color : #5B83AD;}</span></code></pre></td></tr></table></div></figure>


<p>となる
* ミックスイン</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.bordered {
</span><span class='line'>  border-top : dotteed 1px black;
</span><span class='line'>}
</span><span class='line'>#menu a {
</span><span class='line'>  color : #111;
</span><span class='line'>  .bordered;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>と書けば</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#menu a {
</span><span class='line'>  color : #111;
</span><span class='line'>  border-top : dotteed 1px black;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>と.borderedがきちんと解決されて出力</p>

<h2>参照</h2>

<p>http://lesscss.org/#-client-side-usage</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haml/Sassについて]]></title>
    <link href="http://sassy.github.com/blog/2011/11/20/haml/"/>
    <updated>2011-11-20T15:06:00+09:00</updated>
    <id>http://sassy.github.com/blog/2011/11/20/haml</id>
    <content type="html"><![CDATA[<h2>Hamlとは</h2>

<ul>
<li>HTMLを生成するためのマークアップ言語</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>!!!
</span><span class='line'>%html
</span><span class='line'>  %head
</span><span class='line'>    %title Hello,Haml!
</span><span class='line'>%body
</span><span class='line'>  %1h1 Hello, Haml!</span></code></pre></td></tr></table></div></figure>


<h2>Sassとは</h2>

<ul>
<li>CSSを生成するためのメタ言語</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>h1
</span><span class='line'>  :color red</span></code></pre></td></tr></table></div></figure>


<h2>Haml/Sassのインストール</h2>

<p>rubyのgemを使う</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install haml</span></code></pre></td></tr></table></div></figure>


<h2>SassとSCSS</h2>

<h3>Sass</h3>

<ul>
<li>インデントを使った構文</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>h1
</span><span class='line'>  :color red</span></code></pre></td></tr></table></div></figure>


<h3>SCSS(Sassy CSS)</h3>

<ul>
<li>CSSの構文を拡張したもの</li>
</ul>


<h2>Sass(SCSS)の使い方</h2>

<p>style.scssをstyle.cssに変換するには、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sass --watch style:scss:style.css</span></code></pre></td></tr></table></div></figure>


<p>とコマンドする(これをやっておけば、style.scssファイルを変更すれば勝手に、style.cssに変更される)</p>

<h2>SCSSとCSSの違い</h2>

<ul>
<li>ネストが使える</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#navbar {
</span><span class='line'>  width : 8px;
</span><span class='line'>  height : 23px;
</span><span class='line'>  ul { list-style-type: none; }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>を変換すると、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#navbar {
</span><span class='line'>  width: 8px;
</span><span class='line'>  height: 23px; }
</span><span class='line'>  #navbar ul {
</span><span class='line'>    list-style-type: none; }</span></code></pre></td></tr></table></div></figure>


<p>ネストされたものが、解決したものを生成
* 変数が定義できる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#navbar {
</span><span class='line'>  $navar-width : 800px; /* 変数 */
</span><span class='line'>  width : $navar-width;  /* 変数を使う */
</span><span class='line'>  height : 23px;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>を変換すると、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@charset "UTF-8";
</span><span class='line'>#navbar {
</span><span class='line'>  /* 変数 */
</span><span class='line'>  width: 800px;
</span><span class='line'>  /* 変数を使う */
</span><span class='line'>  height: 23px; }
</span></code></pre></td></tr></table></div></figure>


<p>変数が解決されたものが生成(charsetはコメントに日本語を使ったから)
* 式や関数</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#navbar {
</span><span class='line'>  $navar-width : 800px; /* 変数 */
</span><span class='line'>  width : $navar-width / 2 + 100;  /* 式を使って計算 */
</span><span class='line'>  height : 23px;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>を変換すると、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@charset "UTF-8";
</span><span class='line'>#navbar {
</span><span class='line'>  /* 変数 */
</span><span class='line'>  width: 500px;
</span><span class='line'>  /* 式を使って計算 */
</span><span class='line'>  height: 23px; }</span></code></pre></td></tr></table></div></figure>


<p>変数を解決。
また、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#navbar {
</span><span class='line'>  $navbar-color : #ce4dd6;
</span><span class='line'>  background-color : lighten($navbar-color, 20%); /* 用意されたlighten()関数を使う */
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>を変換すると、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@charset "UTF-8";
</span><span class='line'>#navbar {
</span><span class='line'>  background-color: #e5a0e9;
</span><span class='line'>  /* 用意されたlighten()関数を使う */ }</span></code></pre></td></tr></table></div></figure>


<p>となる。lighten()をいう関数を処理した結果が生成される。
* インターポレーション
** <code>#{$foo}</code>で変数をセレクタ等に利用できる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$side : top;
</span><span class='line'>#round {
</span><span class='line'>    border-#{$side}-radius: 10px;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>は、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#round {
</span><span class='line'>  border-top-radius: 10px; }</span></code></pre></td></tr></table></div></figure>


<p>と解決
* ミックスイン
** @mixinでくくったスタイルを @includeで再利用可能</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@mixin round-top {
</span><span class='line'>  $side : top;
</span><span class='line'>  $radius : 10px;
</span><span class='line'>  border-#{$side}-radius: $radius;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#navbar li { @include round-top;}
</span><span class='line'>#footer { @include round-top;}</span></code></pre></td></tr></table></div></figure>


<p>とすると、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#navbar li {
</span><span class='line'>  border-top-radius: 10px; }
</span><span class='line'>
</span><span class='line'>#footer {
</span><span class='line'>  border-top-radius: 10px; }</span></code></pre></td></tr></table></div></figure>


<p><code>#navar li</code>と<code>#footer</code>はmixinで定義された内容が入っている。
** ミックスインでは、引数も設定可能</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@mixin round-top($side) {
</span><span class='line'>  $radius : 10px;
</span><span class='line'>  border-#{$side}-radius: $radius;
</span><span class='line'>}
</span><span class='line'>#navbar li { @include round-top(top);}</span></code></pre></td></tr></table></div></figure>


<p>は、引数$siteを受け取って変換する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#navbar li {
</span><span class='line'>  border-top-radius: 10px; }</span></code></pre></td></tr></table></div></figure>


<h2>参照</h2>

<p>http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Memo]Octpressのコマンド]]></title>
    <link href="http://sassy.github.com/blog/2011/11/20/octpress-commands/"/>
    <updated>2011-11-20T14:53:00+09:00</updated>
    <id>http://sassy.github.com/blog/2011/11/20/octpress-commands</id>
    <content type="html"><![CDATA[<p>新規記事の投稿</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["(title名)"]</span></code></pre></td></tr></table></div></figure>


<p>記事のデプロイ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake gen_deploy</span></code></pre></td></tr></table></div></figure>


<p>記事のプレビュー</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>記事のプレビューはhttp://localhost:4000 でチェック</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Article]]></title>
    <link href="http://sassy.github.com/blog/2011/11/20/first-article/"/>
    <updated>2011-11-20T01:42:00+09:00</updated>
    <id>http://sassy.github.com/blog/2011/11/20/first-article</id>
    <content type="html"><![CDATA[<h2>Octopress+GitHubでブログたててみました。</h2>

<p><a href="http://twitter.com/#!/omo2009/status/137904652208451584">とある事情</a>により、
Octopressを使ってみることにしました。</p>

<p>以下を参考にしました。</p>

<blockquote><p><a href="http://glidenote.github.com/blog/2011/11/07/install-octopress-on-github/">http://glidenote.github.com/blog/2011/11/07/install-octopress-on-github/</a></p></blockquote>

<p>Ocropressのサイトは以下です。</p>

<blockquote><p><a href="http://octopress.org/">http://octopress.org/</a></p></blockquote>

<p>ちなみに私のMacのrubyのversionは1.8.7だったので、せっかくなので、rvmを導入しました。
以下を参考にインストール</p>

<blockquote><p><a href="https://rvm.beginrescueend.com/rvm/install/">https://rvm.beginrescueend.com/rvm/install/</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
