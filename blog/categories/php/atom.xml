<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | Sassy Tech Log]]></title>
  <link href="http://sassy.github.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://sassy.github.com/"/>
  <updated>2011-12-07T00:33:17+09:00</updated>
  <id>http://sassy.github.com/</id>
  <author>
    <name><![CDATA[Satoshi Watanabe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHPのsession_start()]]></title>
    <link href="http://sassy.github.com/blog/2011/12/01/php-session/"/>
    <updated>2011-12-01T23:19:00+09:00</updated>
    <id>http://sassy.github.com/blog/2011/12/01/php-session</id>
    <content type="html"><![CDATA[<h2>session_start()</h2>

<ul>
<li>session_start()はセッションを作成する関数</li>
<li><code>$_SESSION</code>はセッション変数</li>
<li>セッションはクッキーにセッションIDを保存する。セッションIDにひもづいたセッション変数はサーバー側に保存
```
&lt;?php
session_start();</li>
</ul>


<p>$<em>SESSION['favcolor'] = 'green';
$</em>SESSION['animal'] = 'cat';
$_SESSION['time'] = time();
?>
```</p>

<h3>isset()</h3>

<ul>
<li>変数が保存されているかどうかを確かめる</li>
<li>`isset($_SESSION['foo'])'のようにして、セッション変数に値が入っているかを確かめることが可能</li>
</ul>


<h3>$_REQUEST</h3>

<ul>
<li>$<em>GET, $</em>POST, $_COOKIEを合わせた連想配列</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPのファイル処理]]></title>
    <link href="http://sassy.github.com/blog/2011/12/01/php-file/"/>
    <updated>2011-12-01T07:30:00+09:00</updated>
    <id>http://sassy.github.com/blog/2011/12/01/php-file</id>
    <content type="html"><![CDATA[<h2>PHPのファイル処理</h2>

<p><code>
&lt;?php
$file = fopen("./file.txt", "r");
while (!feof($file)) {
  $line = fgets($file);
  echo $line;
}
fclose($file);
?&gt;
</code></p>

<h4>fopen</h4>

<ul>
<li>ファイルを開く</li>
<li>戻り値はファイルハンドラ</li>
<li>第２引数のrは読み取り専用, wは書き込み専用, r+/w+は読み込み／書き込み, aは追記, a+は追記と読み込み

<h4>fclose</h4></li>
<li>ファイルを閉じる

<h4>feof</h4></li>
<li>ファイルを最後までよんだかチェックする

<h4>fgets</h4></li>
<li>ファイルから１行読み込む</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPの配列]]></title>
    <link href="http://sassy.github.com/blog/2011/11/27/php-array/"/>
    <updated>2011-11-27T14:10:00+09:00</updated>
    <id>http://sassy.github.com/blog/2011/11/27/php-array</id>
    <content type="html"><![CDATA[<h2>PHPの配列</h2>

<h3>初期化</h3>

<p><code>
$member = array('Atsuko', 'Yuko', 'Haruna',);
echo $member[0], PHP_EOL; // Atsuko
</code>
* array()関数で配列初期化
* []で配列アクセス</p>

<pre><code>* 添字は0から
</code></pre>

<ul>
<li>以下のように配列に要素を追加することも可能
<code>
$member[] = 'Mariko';
$member[] = 'Mayu';
</code>

<h3>連想配列</h3></li>
<li>要素に名前を付けることが可能
<code>
array([キー =&gt; 要素 [,...] ])
</code>
例えば、下記のようになる。
<code>
&lt;?php
$fruits_color = array(
'apple' =&gt; 'red',
'banana' =&gt; 'yellow',
'orange' =&gt; 'orange',
);
echo $fruits_color['banana'], PHP_EOL; //yellow
?&gt;
</code></li>
<li>キーとして使えるのは、

<ul>
<li>整数</li>
<li>文字列</li>
</ul>
</li>
</ul>


<h3>配列の演算</h3>

<table>
<thead>
<tr>
<th>演算子</th>
<th>意味</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>+    </td>
<td>結合  </td>
<td>両辺を結合</td>
</tr>
<tr>
<td>==   </td>
<td>同一  </td>
<td>両辺のキーと値のペアが等しい場合true</td>
</tr>
<tr>
<td>===  </td>
<td>同等  </td>
<td>両辺のキー／値が等しい、並び順が等しい、データ型も等しい場合true</td>
</tr>
<tr>
<td>!=,&lt;></td>
<td>同等でない</td>
<td>両辺が同等でない</td>
</tr>
<tr>
<td>!==  </td>
<td>同一でない</td>
<td>両辺が同一でない</td>
</tr>
</tbody>
</table>


<h3>foreach</h3>

<ul>
<li>配列やIteratorインターフェースを実装したクラスのオブジェクトに使用可能</li>
<li>データ構造を順番に処理するための制御構造
<code>
foreach(反復可能なデータ構造 as 要素) {
処理
}
</code>
<code>
&lt;?php
$no3b = array('Kojiharu', 'Takamina', 'Miichan');
foreach ($no3b as $member) {
echo $member, PHP_EOL;
}
?&gt;
</code></li>
<li>参照も使用可能</li>
<li>参照を使うと元の配列の要素を変更することが可能
<code>
foreach(反復可能なデータ構造 as &amp;要素) {
処理
}
</code></li>
</ul>


<h3>array_shift()</h3>

<ul>
<li>配列の先頭を取り出す</li>
<li>先頭要素は削除される

<h3>array_unshift()</h3></li>
<li>配列の先頭に要素を追加する

<h3>array_pop()</h3></li>
<li>配列の末尾から要素を取り出す

<h3>array_push()</h3></li>
<li>配列の末尾に要素を追加する</li>
</ul>


<h3>sort</h3>

<ul>
<li>配列をsortする
<code>
&lt;?php
$nums = array(4, 7, 9, 5, 1, 3, 6,);
sort($nums);
foreach ($nums as $num) {
echo $num, PHP_EOL;
}
?&gt;
</code></li>
<li>sortの関数は以下

<ul>
<li>sort 配列のsortを昇順に並び替える</li>
<li>rsort 配列のsortを降順に並び替える</li>
<li>ksort 配列をキーに対して昇順に並び替える</li>
<li>krsort 配列をキーに対して降順に並び替える</li>
<li>asort キーと値の関係を維持しつつ値に対して昇順に並び替える</li>
<li>arsort キーと値の関係を維持しつつ値に対して降順に並び替える</li>
<li>usort ユーザ定義の比較関数を用いて並び替える</li>
<li>uasort ユーザ定義の比較関数を用いてキーと値の関係を維持しつつ並び替える</li>
<li>uksort ユーザ定義の比較関数を用いてキーを並び替える</li>
</ul>
</li>
</ul>


<h3>list()</h3>

<ul>
<li>配列の各要素を一度に変数に代入する
<code>
&lt;?php
$members = array('Atuko', 'Yuko', 'Yuki');
list($first, $second, $third) = $members;
echo $first, PHP_EOL;
echo $second, PHP_EOL;
echo $third, PHP_EOL;
?&gt;
</code>

<h3>explode</h3></li>
<li>文字列を特定の文字列で分割し、配列にする
<code>
&lt;?php
$member_str = "Atuko:Yuko:Haruna";
$members = explode(':', $member_str);
foreach($members as $member) {
echo $member, PHP_EOL;
}
?&gt;
</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPの関数]]></title>
    <link href="http://sassy.github.com/blog/2011/11/27/php-function/"/>
    <updated>2011-11-27T13:11:00+09:00</updated>
    <id>http://sassy.github.com/blog/2011/11/27/php-function</id>
    <content type="html"><![CDATA[<h2>PHPをコマンドラインで使うには、</h2>

<ul>
<li>phpファイルを以下のように記述
```

<h1>!/usr/bin/php -q</h1>

<p>&lt;?php
・・・(処理を記述)・・・
?>
```</p></li>
<li><code>php ./test.php</code>で実行する</li>
</ul>


<h2>PHPの関数</h2>

<ul>
<li><code>function 関数名 ([引数])</code>で定義
```
&lt;?php
function hello_add($v1, $v2)  //関数の定義
{
$answer = $v1 + $v2;
return $answer;  // return で結果を返す
}</li>
</ul>


<p>$v3 = hello_add(1, 2);
echo($v3);
echo("\n");
?>
```</p>

<h3>引数のデフォルト値</h3>

<ul>
<li>=演算子で指定する</li>
<li>デフォルト値を持つ引数は、デフォルト値を持たない引数より後に定義
<code>
&lt;?php
function say_hello($name, $greeting='Hello!')
{
echo $greeting, $name, PHP_EOL;
}
?&gt;
</code></li>
</ul>


<h3>コールバック関数</h3>

<ul>
<li>PHPは引数に関数を渡すことができる</li>
<li>引数に渡す方法は以下

<ul>
<li>関数名を文字列</li>
<li>無名関数</li>
<li>クラスやクラスのインスタンスとメソッド名を持つ配列</li>
<li>クラスの静的メソッドを表す文字列</li>
</ul>
</li>
<li>下記は <code>array_map()</code>という配列一つ一つに渡された関数を適用する関数を使用した例
```
&lt;?php
function  add5($v)
{
return $v + 5;
}</li>
</ul>


<p>$num_array = array(1, 2, 3, 4, 5);
$new_num_array = array_map('add5', $num_array); //関数名を文字列で指定
foreach ($new_num_array as $value) {
  echo $value, PHP_EOL;
}
<code>
上記の結果は、
</code>
6
7
8
9
10
```</p>

<h3>可変関数</h3>

<ul>
<li>以下のように、関数名が代入された変数を使って、関数を呼び出すことも可能
<code>
$name = 'add5';
echo $name(3), PHP_EOL;  //$name を使って add5(3) を実行
</code></li>
</ul>


<h3>参照</h3>

<p>```
&lt;?php
function &amp;add_one(&amp;$value)
{</p>

<pre><code>$value += 1;
return $value;
</code></pre>

<p>}
$a = 10;
$b =&amp; add_one($a);  //関数の返り値を参照で受け取る必要がある
$b += 1;  // $bだけでなく、$aも変更される
?>
```</p>

<h3>無名関数</h3>

<p><code>
&lt;?php
$add = function($v1, $v2)
{
   return $v1 + $v2;
};
?&gt;
</code></p>

<h3>call_user_func()/call_user_func_array()</h3>

<ul>
<li>call_user_func は第１引数に関数名や無名関数、第２引数以降はその関数の引数を指定</li>
<li>call_user_func_array は第１引数に関数名や無名関数、第２引数にその関数の引数を配列で指定
```
&lt;?php
function add($v1, $v2)
{
return $v1 + $v2;
}
$ret = call_user_func('add', 1, 2); // 関数名を文字列で指定
echo $ret, PHP_EOL;
$ret = call_user_func(function($v1, $v2){ return $v1 + $v2; }, 1, 2);  //無名関数を指定
echo $ret, PHP_EOL;</li>
</ul>


<p>$ret = call_user_func_array('add', array(1, 2)); //引数を配列で指定
echo $ret, PHP_EOL;
?>
```</p>

<h3>get_defined_functions()</h3>

<ul>
<li>定義済み関数を調べるにはget_defined_functions()</li>
</ul>

]]></content>
  </entry>
  
</feed>
