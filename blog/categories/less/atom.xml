<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: LESS | Sassy Memo Blog]]></title>
  <link href="http://sassy.github.com/blog/categories/less/atom.xml" rel="self"/>
  <link href="http://sassy.github.com/"/>
  <updated>2011-11-27T17:54:30+09:00</updated>
  <id>http://sassy.github.com/</id>
  <author>
    <name><![CDATA[Satoshi Watanabe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LESSって何?]]></title>
    <link href="http://sassy.github.com/blog/2011/11/20/less/"/>
    <updated>2011-11-20T15:58:00+09:00</updated>
    <id>http://sassy.github.com/blog/2011/11/20/less</id>
    <content type="html"><![CDATA[<p><img src="http://lesscss.org/images/logo.png" title="'logo'" ></p>

<h2>LESS</h2>

<ul>
<li>The dynamic stylesheet language.</li>
<li>要するに、CSSのメタ言語</li>
<li>JavaScriptで実装される</li>
</ul>


<h2>LESSのメリット</h2>

<ul>
<li>ネスト</li>
<li>変数</li>
<li>ミックスイン</li>
<li>演算／関数</li>
</ul>


<p>要するに、SCSSでメリットだったことがメリット</p>

<h2>LESSを使うには</h2>

<h3>クライアントサイド</h3>

<p>less.jsを持って来て
```
<link rel="stylesheet/less" type="text/css" href="styles.less"></p>

<script src="less.js" type="text/javascript"></script>


<p>```
を書く。</p>

<h3>サーバーサイド(node.js)</h3>

<p>インストールは
<code>
npm install less
</code>
あとは、
```
var less = require('less');</p>

<p>less.render('.class { width: 1 + 1 }', function (e, css) {</p>

<pre><code>console.log(css);
</code></pre>

<p>});
```
のように使えば、生成される。</p>

<h2>LESSの文法</h2>

<ul>
<li>変数
```
@nice-blue : #5B83AD;

<h1>header {</h1>

color : @nice-blue;
}
<code>
とすれば、
</code>

<h1>header { color : #5B83AD;}</h1>

<p>```
となる</p></li>
<li>ミックスイン
```
.bordered {
border-top : dotteed 1px black;
}

<h1>menu a {</h1>

color : #111;
.bordered;
}
<code>
と書けば
</code>

<h1>menu a {</h1>

<p>color : #111;
border-top : dotteed 1px black;
}
```
と.borderedがきちんと解決されて出力</p></li>
</ul>


<h2>参照</h2>

<p>http://lesscss.org/#-client-side-usage</p>
]]></content>
  </entry>
  
</feed>
